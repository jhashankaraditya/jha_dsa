/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class BSTIterator {
    vector<int> inorder;
    int index;
public:
    void inorderTraverse(TreeNode* root, vector<int> &inorder) {
        if (root==NULL) {
            return;
        }
        inorderTraverse(root->left,inorder);
        inorder.push_back(root->val);
        inorderTraverse(root->right,inorder);
    }
    BSTIterator(TreeNode* root) {
        inorderTraverse(root,inorder);
        index=-1;
    }
    
    int next() {
        index++;
        return inorder[index];
    }
    
    bool hasNext() {
        // cout<<index<<" "<<inorder.size()-1<<endl;
        int last_pos=inorder.size()-1;
        return index<last_pos;
    }
};

/**
 * Your BSTIterator object will be instantiated and called as such:
 * BSTIterator* obj = new BSTIterator(root);
 * int param_1 = obj->next();
 * bool param_2 = obj->hasNext();
 */
