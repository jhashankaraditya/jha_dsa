class Solution {
public:
    string lexGreaterPermutation(string s, string target) {
        int n=s.size();
        vector<int> sFreq(26,0);
        cout<<"a ";
        for (int i=0; i<n; i++) {
            sFreq[s[i]-'a']++;
        }
        cout<<"b ";
        int curr=target[0]-'a';
        if (sFreq[curr]>0 && n>1) {
            if (s.find(target[0])==string::npos) {
                return "";
            }
            s.erase(s.find(target[0]),1);
            string res=lexGreaterPermutation(s,target.substr(1));
            if (res!="") {
                return target[0]+res;
            }
        }
        cout<<"c ";
        for (int i=target[0]-'a'+1; i<26; i++) {
            string ans;
            char ch=('a'+i);
            if (sFreq[i]>0) {
                sFreq[i]--;
                ans.push_back(ch);
                for (int j=0; j<26; j++) {
                    while (sFreq[j]>0) {
                        ans.push_back('a'+j);
                        sFreq[j]--;
                    }
                }
                return ans;
            }
        }
        cout<<"d ";
        return "";
    }
};
