class Solution {
public:
    int longestBalanced(string s) {
        int maxLen=0, n=s.size();
        vector<vector<int>> mat(26,vector<int>(n,0));
        for (int i=0; i<n; i++) {
            int pos=s[i]-'a';
            mat[pos][i]++;
        }
        for (int i=0; i<26; i++) {
            for (int j=1; j<n; j++) {
                mat[i][j]+=mat[i][j-1];
            }
        }
        bool freqUsed[1001];
        for (int i=0; i<n; i++) {
            for (int j=i; j<n; j++) {
                memset(freqUsed, false, sizeof(freqUsed));
                int uniqueFreqs = 0;
                for (int l=0; l<26; l++) {
                    int freq=0;
                    if (i==0) {
                        freq=mat[l][j];
                    }
                    else freq=mat[l][j]-mat[l][i-1];
                    if (freq>0 && !freqUsed[freq]) {
                        freqUsed[freq]=true;
                        uniqueFreqs++;
                    }
                }
                if (uniqueFreqs==1) {
                    maxLen=max(maxLen,j-i+1);
                }
            }
        }
        return maxLen;
    }
};
