class Solution {
public:
    int minSwaps(vector<int>& nums) {
        vector<pair<int,int>> sumNum;
        for (int i=0; i<nums.size(); i++) {
            int sum=0, num=nums[i];
            while (num>0) {
                sum+=(num%10);
                num/=10;
            }
            sumNum.push_back({sum,nums[i]});
        }
        sort(sumNum.begin(),sumNum.end());
        unordered_map<int,int> initialPos;
        unordered_map<int,int> finalPos;
        unordered_map<int,bool> posMarked;
        for (int i=0; i<nums.size(); i++) {
            initialPos[nums[i]]=i;
            finalPos[sumNum[i].second]=i;
        }
        int swaps=0;
        for (int i=0; i<nums.size(); i++) {
            if (!posMarked[i]) {
                int cycleSize=0, index=i;
                while (!posMarked[index]) {
                    posMarked[index]=true;
                    index=initialPos[sumNum[index].second];
                    cycleSize++;
                }
                swaps+=(cycleSize-1);
            }
        }
        return swaps;
    }
};
