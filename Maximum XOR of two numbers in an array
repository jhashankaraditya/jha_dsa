class TrieNode {
    public:
    TrieNode* links[2];
    bool isterminal=false;
    bool containskey(int bit) {
        return links[bit]!=NULL;
    }
    TrieNode* get(int bit) {
        return links[bit];
    }
    void put(int bit, TrieNode* node) {
        links[bit]=node;
    }
};
class Trie {
    private:
    TrieNode* root=new TrieNode();
    public:
    void insert(int num) {
        TrieNode* node=root;
        for (int i=31; i>=0; i--) {
            int bit=(num>>i)&1;
            if (!node->containskey(bit)) {
                node->put(bit,new TrieNode());
            }
            node=node->get(bit);
        }
        node->isterminal=true;
    }
    int getmax(int num) {
        int maxi=0;
        TrieNode* node=root;
        for (int i=31; i>=0; i--) {
            int bit=(num>>i)&1;
            if (node->containskey(1-bit)) {
                node=node->get(1-bit);
                maxi=maxi|(1<<i);
            }
            else node=node->get(bit);
        }
        return maxi;
    }
};
class Solution {
public:
    int findMaximumXOR(vector<int>& nums) {
        Trie* trie=new Trie();
        for (int i=0; i<nums.size(); i++) {
            trie->insert(nums[i]);
        }
        int maxi=0;
        for (int i=0; i<nums.size(); i++) {
            maxi=max(maxi,trie->getmax(nums[i]));
        }
        return maxi;
    }
};
