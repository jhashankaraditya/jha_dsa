/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    void zigzag(TreeNode* root, vector<vector<int>> &zigzagtraverse) {
        bool left_to_right=true;
        queue<TreeNode*> q;
        q.push(root);
        while (!q.empty()) {
            int size=q.size();
            vector<int> level(size);
            if (left_to_right) {
                for (int i=0; i<size; i++) {
                    level[i]=q.front()->val;
                    if (q.front()->left) {
                        q.push(q.front()->left);
                    }
                    if (q.front()->right) {
                        q.push(q.front()->right);
                    }
                    q.pop();
                }
            }
            else {
                for (int i=size-1; i>=0; i--) {
                    level[i]=q.front()->val;
                    if (q.front()->left) {
                        q.push(q.front()->left);
                    }
                    if (q.front()->right) {
                        q.push(q.front()->right);
                    }
                    q.pop();
                }
            }
            left_to_right=!left_to_right;
            zigzagtraverse.push_back(level);
        }
    }
public:
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
        if (root==NULL) {
            return {};
        }
        vector<vector<int>> zigzagtraverse;
        zigzag(root,zigzagtraverse);
        return zigzagtraverse;        
    }
};
