class Solution {
public:
    vector<vector<int>> solve(vector<vector<int>> &matrix, vector<vector<bool>> &marked) {
        char direction='r';
        int i=0, j=0;
        int num=1;
        while (i>=0 && i<matrix.size() && j>=0 && j<matrix[0].size() && !marked[i][j]) {
            matrix[i][j]=num;
            num++;
            marked[i][j]=true;
            if (direction=='r') {
                if (j<matrix[0].size()-1 && !marked[i][j+1])
                    j++;
                else {
                    direction='d';
                    i++;
                }
            }
            else if (direction=='d') {
                if (i<matrix.size()-1 && !marked[i+1][j])
                    i++;
                else {
                    direction='l';
                    j--;
                }
            }
            else if (direction=='l') {
                if (j>0 && !marked[i][j-1])
                    j--;
                else {
                    direction='u';
                    i--;
                }
            }
            else if (direction=='u') {
                if (i>0 && !marked[i-1][j])
                    i--;
                else {
                    direction='r';
                    j++;
                }
            }
        }return matrix;
    }

    vector<vector<int>> generateMatrix(int n) {
        vector<vector<int>> matrix(n,vector<int>(n,0));
        vector<vector<bool>> marked(n,vector<bool>(n,false));
        return solve(matrix,marked);
    }
};
