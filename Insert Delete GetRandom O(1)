class RandomizedSet {
    vector<int> nums;
    unordered_map<int,int> nums_indices;
public:
    RandomizedSet() {
        
    }
    
    bool insert(int val) {
        bool notPresent;
        if (nums_indices.find(val)==nums_indices.end()) {
            nums.push_back(val);
            nums_indices[val]=nums.size()-1;
            notPresent=true;
        }
        else {
            notPresent=false;
        }
        return notPresent;
    }
    
    bool remove(int val) {
        bool present;
        if (nums_indices.find(val)==nums_indices.end()) {
            present=false;
        }
        else {
            present=true;
            int index=nums_indices[val];
            swap(nums[index],nums[nums.size()-1]);
            nums_indices[nums[index]]=index;
            nums_indices.erase(nums[nums.size()-1]);
            nums.pop_back();
        }
        return present;
    }
    
    int getRandom() {
        return nums[rand()%nums.size()];
    }
};

/**
 * Your RandomizedSet object will be instantiated and called as such:
 * RandomizedSet* obj = new RandomizedSet();
 * bool param_1 = obj->insert(val);
 * bool param_2 = obj->remove(val);
 * int param_3 = obj->getRandom();
 */
