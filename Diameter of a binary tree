/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    int calcHeight(TreeNode* root) {
        if (root==NULL) {
            return 0;
        }
        return max(calcHeight(root->left),calcHeight(root->right))+1;
    }
    int calcDiameter(TreeNode* root) {
        if (root==NULL || (root->left==NULL && root->right==NULL)) {
            return 0;
        }
        int leftDiameter=calcDiameter(root->left);
        int rightDiameter=calcDiameter(root->right);
        int leftHeight=calcHeight(root->left);
        int rightHeight=calcHeight(root->right);
        int selfDiameter=leftHeight+rightHeight;
        return max(selfDiameter,max(leftDiameter,rightDiameter));
    }
public:
    int diameterOfBinaryTree(TreeNode* root) {
        return calcDiameter(root);
    }
};
