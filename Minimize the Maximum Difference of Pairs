class Solution {
    bool isMaxDiff(vector<int> &nums, int p ,int mid) {
        int count=0, n=nums.size();
        for (int i=0; i<n-1; i++) {
            if (nums[i+1]-nums[i]<=mid) {
                count++;
                i++;
            }
        }
        return count>=p;
    }
public:
    int minimizeMax(vector<int>& nums, int p) {
        if (p==0) {
            return 0;
        }
        int ans=-1;
        sort(nums.begin(),nums.end());
        int n=nums.size();
        int low=nums[n-1]-nums[0], high=nums[n-1]-nums[0];
        for (int i=0; i<n-1; i++) {
            low=min(low,nums[i+1]-nums[i]);
        }
        while (low<=high) {
            int mid=(low+high)/2;
            if (isMaxDiff(nums,p,mid)) {
                ans=mid;
                high=mid-1;
            }
            else low=mid+1;
        }
        return ans;
    }
};
